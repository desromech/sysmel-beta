
public template PrimitiveIntegerTestCase(VT: Type)
    := class superclass: TestCase; definition: {
    public compileTime constant ValueType := VT.

    public method equality => Void := {
        self assert: ValueType(1) = ValueType(1).
        self deny: ValueType(1) = ValueType(0).
        self deny: ValueType(0) = ValueType(1).

        self deny: ValueType(1) ~= ValueType(1).
        self assert: ValueType(1) ~= ValueType(0).
        self assert: ValueType(0) ~= ValueType(1).

        let a type: ValueType := 1.
        let b type: ValueType := 1.
        let c type: ValueType := 0.

        self assert: a = b.
        self assert: a equals: b.

        self assert: b = a.
        self assert: b equals: a.
    }.

    public method comparisons => Void := {

    }.

    public method arithmetic => Void := {

    }.

    public method run => Void := {
        self
            equality;
            comparisons;
            arithmetic
    }.
}.

compileTime constant Int32TestCase := PrimitiveIntegerTestCase(Int32).
compileTime constant Int64TestCase := PrimitiveIntegerTestCase(Int64).
compileTime constant UInt32TestCase := PrimitiveIntegerTestCase(UInt32).
compileTime constant UInt64TestCase := PrimitiveIntegerTestCase(UInt64).

public externC function main() => Int32 := {
    Int32TestCase() run.
    Int64TestCase() run.
    UInt32TestCase() run.
    UInt64TestCase() run.
    0
}.